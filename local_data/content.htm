<h1>CMSimfly</h1>
<p>這是位於 <a href="https://www.heroku.com">heroku</a> 的 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 網站, 由於能在網頁中維護的 <a href="https://www.heroku.com">heroku</a> 網站, 必須與其他雲端儲存系統結合, 而本站是在近端維護後, 提交推送到 <a href="https://www.heroku.com">heroku</a>, 因此目前只能展示&nbsp;<a href="https://git.heroku.com/wcms-scrum3.git">https://git.heroku.com/wcms-scrum3.git</a>&nbsp;倉儲中的網際內容資料, 透過瀏覽器修改的內容, 將會不定期遭 <a href="https://www.heroku.com">heroku</a> 刪除.</p>
<p>儘管如此, 在近端維護後提交推送到遠端的資料維護模式, 仍可用來呈現網際內容管理相關程式的執行結果.</p>
<p>例如:</p>
<p><a href="/w1cda">w1cda 分組程式</a>&nbsp;</p>
<p><a href="/w7cda">w7cda 列出缺席名單</a></p>
<p><a href="/w5cdb">w5cdb 列出缺席名單</a></p><h1>學習 Lua</h1>
<p><a href="/lua">Lua 網際程式環境</a></p>
<p>以下為網際 Lua 系統中的 <a href="/lua?filename=fun1">Canvas 繪圖範例</a>:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local global = js.global
local document = global.document
-- html 檔案中 canvas　id 設為 "canvas"
local canvas = document:getElementById("canvas")
-- 將 ctx 設為 canvas 2d 繪圖畫布變數
local ctx = canvas:getContext("2d")

-- 屬性呼叫使用 . 而方法呼叫使用 :
-- 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
-- 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"

-- 乘上 deg 可轉為徑度單位
deg = math.pi / 180

-- 建立多邊形定點位置畫線函式
function star(radius, xc, yc, n)
    --radius = 100
    --xc = 200
    --yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx:beginPath()
    ctx:moveTo(xi,yi)
    for i = 2, n+1 do
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx:lineTo(x,y)
    end
end

-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
-- 畫五邊形框線
star(100, 200, 200, 5)
ctx:closePath()
ctx:stroke()

-- 填三角形色塊
star(50, 350, 200, 3)
ctx:closePath()
ctx:fill()

-- 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 450, 200, 7)
ctx:closePath()
ctx:stroke()
    </pre>
<p>&nbsp;</p><h1>學習 V-rep</h1>
<p>Virtual robot experimentation platform 虛擬機器人實驗平台</p>
<p>The robot simulator V-REP, with integrated development environment, is based on a distributed control architecture: each object/model can be individually controlled via an embedded script, a plugin, a ROS or BlueZero node, a remote API client, or a custom solution. This makes V-REP very versatile and ideal for multi-robot applications. Controllers can be written in C/C++, Python, Java, Lua, Matlab or Octave.</p>
<p>V-REP is used for fast algorithm development, factory automation simulations, fast prototyping and verification, robotics related education, remote monitoring, safety double-checking, etc.</p>
<p>功能-&nbsp;<a href="http://www.coppeliarobotics.com/features.html">http://www.coppeliarobotics.com/features.html</a>&nbsp;</p>
<p>使用授權:&nbsp;<a href="http://www.coppeliarobotics.com/licensing.html">http://www.coppeliarobotics.com/licensing.html</a>&nbsp;<a href="http://www.coppeliarobotics.com/assets/v-replicensingoverview.pdf">使用授權說明</a></p>
<p>使用者手冊:&nbsp;<a href="http://www.coppeliarobotics.com/helpFiles/index.html">http://www.coppeliarobotics.com/helpFiles/index.html</a>&nbsp;<a href="http://www.coppeliarobotics.com/contributions.html">其他資料</a></p>
<p><a href="http://www.coppeliarobotics.com/otherscenes.html">額外範例場景</a></p>
<p>論壇:&nbsp;<a href="http://www.forum.coppeliarobotics.com/">http://www.forum.coppeliarobotics.com/</a>&nbsp;</p>
<p>概述:<a href="http://www.coppeliarobotics.com/assets/v-repoverviewpresentation.pdf">http://www.coppeliarobotics.com/assets/v-repoverviewpresentation.pdf</a>&nbsp;</p>
<h2>Dynamic Engines</h2><p><a href="http://bulletphysics.org">http://bulletphysics.org</a>&nbsp;, <a href="https://github.com/bulletphysics/bullet3">bullet3 on github</a></p><p><a href="http://www.ode.org/">http://www.ode.org/</a>&nbsp;</p><p><a href="http://blog.wolfire.com/2010/03/Comparing-ODE-and-Bullet">ode 與 bullet 比較</a></p><p>2015.10 已經被微軟併購的&nbsp;<a href="https://www.havok.com">https://www.havok.com</a>&nbsp;</p><p><a href="https://www.algoryx.se">https://www.algoryx.se</a>&nbsp;與&nbsp;<a href="http://www.algodoo.com">http://www.algodoo.com</a>&nbsp;(教育市場)</p><h1>Flask 使用手冊</h1>
<p><a href="http://flask.pocoo.org/docs/0.10/.latex/Flask.pdf">http://flask.pocoo.org/docs/0.10/.latex/Flask.pdf</a></p>
<p>local <a href="/download/?type=files&amp;filename=Flask.pdf">Flask.pdf</a>&nbsp;(表示 CMSimfly 的 downlosd 功能是正常的, 但是 downloads 則有問題!!</p>
<p>Micro 等級的 Python 網際程式框架指的是指保留核心基礎功能, 其他功能則以 plugin 附加</p>
<p>特性是模組化強, 功能較具彈性</p>
<p>Flask depends on two external libraries, Werkzeug and Jinja2.</p>
<p>Werkzeug is a toolkit for WSGI, the standard Python interface between web applications and a variety of servers for both development and deployment.</p>
<p>Jinja2 renders templates.</p>
<p>利用 pip 安裝 Flask</p>
<p>sudo pip install Flask</p>
<p>假如是在 Windows, 則要將 Python 安裝目錄下的 Scripts 設為指令搜尋路徑</p>
<p>最小執行程式設定</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
# 將檔案存成 simpleflask.py
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello World!'
if __name__ == '__main__':
    app.run()</pre>
<p>Flask 程式執行:</p>
<p>python simpleflask.py</p>
<p>然後以瀏覽器 <a>http://localhost:5000</a>&nbsp;擷取 Flask 程式回應內容</p>
<p>So what did that code do?</p>
<ol>
<li>First we imported the Flask class. An instance of this class will be our WSGI application.</li>
<li>&nbsp;Next we create an instance of this class. The first argument is the name of the application&rsquo;s module or package. If you are using a single module (as in this example), you should use __name__ because depending on if it&rsquo;s started as application or imported as module the name will be different ('__main__' versus the actual import name). This is needed so that Flask knows where to look for templates, static files, and so on.&nbsp;</li>
<li>We then use the route() decorator to tell Flask what URL should trigger our function.</li>
<li>The function is given a name which is also used to generate URLs for that particular function, and returns the message we want to display in the user&rsquo;s browser.</li>
<li>Finally we use the run() function to run the local server with our application. The if __name__ == '__main__': makes sure the server only runs if the script is executed directly from the Python interpreter and not used as an imported module.</li>
<li>To stop the server, hit control-C.</li>
</ol>