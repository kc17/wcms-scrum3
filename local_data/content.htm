<h1>2018S課程</h1>
<p>相關網站: <a href="http://mde.tw">http://mde.tw</a></p>
<h2>cd2018</h2>
<p>協同產品設計實習</p>
<p>倉儲: <a href="https://github.com/mdecourse/cd2018">https://github.com/mdecourse/cd2018</a></p>
<p>議題: <a href="https://github.com/mdecourse/cd2018/issues">https://github.com/mdecourse/cd2018/issues</a></p>
<p><span style="background-color: #ffff00;">簡介</span></p>
<p>本學期的課程在承接上學期電腦輔助設計實習中所建構的鋼球循環運動系統, 加上四輪車或者多連桿行走機構, 在位於 100cm x 60cm 平台上的四個角落的循環運動系統間, 負責運送一定數量之鋼球,&nbsp; 各循環運動系統的尺寸以 20cm x 15cm x 15cm 為限.</p>
<p><span style="background-color: #ffff00;">使用工具</span></p>
<p>可攜程式套件: <a href="https://drive.google.com/file/d/1qSVNH1052bcPyepgGfxN8dciufOM0gUu/view?usp=sharing">kmol_level2</a></p>
<p>電腦輔助設計套件: Solidworks, Inventor, Creo, Onshape 或 Solvespace</p>
<p>機器人模擬平台: V-rep</p>
<p>程式語言: Python, Lua, C/C++</p>
<p><span style="background-color: #ffff00;">執行內容</span></p>
<p>第九週前以 3 人一組, 完成下列要求:</p>
<ol>
<li>在 V-rep 模擬平台中, 展示各組所選定的鋼球運動系統, 是否可以完成至少兩個週期的循環運動?</li>
<li>各組頂球機構的位移、速度與加速度分析, 手動運算是否與程式驗算或 V-rep 模擬相符?</li>
<li>詳細說明各組如何進行協同設計, 如何利用 Gitbook、Github 與近端或雲端主機增加設計流程效益?</li>
<li>提供各組鋼球運動系統的細部零件材料表、各零件工程圖與組立檔, 若使用 Solidworks, Inventor 或 Creo 請提供相關檔案, 若使用 Onshape, 請提供個別零組件與工程圖的網路連結.</li>
<li>所有組員的貢獻請各自使用學號登記下的 cd2018 倉儲展示, 各組期中報告則整理在各組的 Gitbook 中.</li>
</ol>
<h3>Pyslvs</h3>
<p>下載 Pyslvs 平面機構模擬分析與合成套件&nbsp;<a href="https://drive.google.com/open?id=1t3HGbhujIhFHealc5xQ2AHWOY2m99pPL" rel="nofollow">pyslvs-18.4.0.mscv1900-amd64.7z</a></p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/XPfK5aO95BI" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<h2>wcms2018</h2>
<p>網際內容管理</p>
<p>倉儲: <a href="https://github.com/mdecourse/wcms2018">https://github.com/mdecourse/wcms2018</a></p>
<p>議題: <a href="https://github.com/mdecourse/wcms2018/issues">https://github.com/mdecourse/wcms2018/issues</a></p>
<p><span style="background-color: #ffff00;">簡介</span></p>
<p>本學期的課程在教導學員如何利用近端與遠端的網際軟硬體系統, 以提升機械設計流程中的協同效益.</p>
<p><span style="background-color: #ffff00;">使用工具</span></p>
<p>可攜程式套件: <a href="https://drive.google.com/file/d/1qSVNH1052bcPyepgGfxN8dciufOM0gUu/view?usp=sharing">kmol_level2</a></p>
<p>虛擬主機: <a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a></p>
<p>雲端應用平台: <a href="https://www.heroku.com/">https://www.heroku.com/</a></p>
<p>實體主機: cadlab 中的 70 台電腦 (64 台<a href="http://project.mde.tw/blog/yen-dian-nao-fu-zhu-she-ji-shi-dian-nao-pei-zhi.html">上課用電腦,</a> 以及 6 台協同設計用電腦)</p>
<p>防寫卡系統:&nbsp;<a href="http://www.teamsoftex.com">http://www.teamsoftex.com</a> (群準科技)</p>
<p>雲端範例倉儲: <a href="https://github.com/mdecourse/wcms-scrum3">https://github.com/mdecourse/wcms-scrum3</a></p>
<p>雲端網站範例: <a href="http://wcms-scrum3.herokuapp.com">http://wcms-scrum3.herokuapp.com</a></p>
<p><span style="background-color: #ffff00;">執行內容</span></p>
<p>第九週前以 3 人一組, 完成下列要求:</p>
<ol>
<li>各組必須建立位於虛擬主機與雲端主機中的 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 網際內容管理系統, 並以協同方式維護管理內容.</li>
<li>各組認領下列系上電腦輔助設計室、工作站室與協同設計室相關的課程專案, 設法進行議題研究、實作執行並完成專案報告.</li>
</ol>
<p>課程專案</p>
<ol>
<li>協同設計室軟硬體配置與持續改進專案 (6 台協同電腦的導入與配置)</li>
<li>機械設計系各課程軟硬體使用調查專案 (內容管理系統與 Google Forms 整合應用)</li>
<li>工作站室軟硬體系統配置與持續改進專案 (協同設計室 Ubuntu 18.04 伺服器架配置與管理)</li>
<li>電腦輔助設計室 <a href="http://www.qno.com.tw/web/products_info_qvf8083plus.asp">QVF8083plus</a> 的導入與管理</li>
<li><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 網際內容管理系統持續改進專案</li>
<li>其他</li>
</ol>
<p>參考資料:</p>
<p>群準防寫卡: <a href="http://www.teamsoftex.com/tw/data/file/201712/Card.pdf">http://www.teamsoftex.com/tw/data/file/201712/Card.pdf</a></p>
<h3>Github</h3>
<p>透過 git remote add, 可以將 heorku 上的程式與 github 倉儲同步, 並且再設法將程式及資料轉到自建的 Ubuntu 伺服器 (<a href="https://www.ubuntu.com/info/release-end-of-life">LTS lifecycle</a>)</p>
<p>若以部署 CMSimfly 為例, 基本的使用流程如下:</p>
<ol>
<li>從&nbsp;<a href="https://github.com/chiamingyen/cmsimfly">https://github.com/chiamingyen/cmsimfly</a>&nbsp;取得最新原始碼後, 納入 Procfile, requirements.txt 與 runtime.txt 等三個檔案</li>
<li>在近端以 python wsgi.py 執行, 可以從 <a>https://localhost:9443</a>&nbsp;登入, 或改為區網或廣域網路啟動.</li>
<li>當使用者在近端維護資料, 只會更動 local_data 目錄中的檔案, 其他部分為程式碼.</li>
<li>假如要將近端的 CMSimfly 部署到 heroku, 只需要利用 gmail 帳號, 登記一個 heroku 帳號後, 建立一個 app, 假設此 app 名稱為 app_name, 之後進入 settings 取得該 app 對應的 heroku git 連結, 並假設此連結為 heroku_git.</li>
<li>接著在近端, 以 heroku login 登入系統, 以 git clone heroku_git 取下空的 heroku app 倉儲.</li>
<li>將近端的 CMSimfly 複製到 heroku app 對應的近端倉儲中, 然後以 git add, commit 與 push, 就可以將資料提交推送到 heroku, 等 heroku 安裝所需模組並啟動後, 就可以連線到 https://app_name.herokuapp.com.</li>
</ol>
<p>Procfile 內容:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">web gunicorn flaskapp:app</pre>
<p>requirements.txt 內容:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Flask==0.12.2
gunicorn==19.7.1
Jinja2==2.10
MarkupSafe==1.0
Werkzeug==0.14.1</pre>
<p>runtime.txt 內容:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">python-3.6.4</pre>
<p>&nbsp;</p>
<h2>vecp2018</h2>
<p>計算機程式</p>
<p>倉儲: <a href="https://github.com/mdecourse/vecp2018">https://github.com/mdecourse/vecp2018</a></p>
<p>議題: <a href="https://github.com/mdecourse/vecp2018/issues">https://github.com/mdecourse/vecp2018/issues</a></p>
<p><span style="background-color: #ffff00;">簡介</span></p>
<p>本學期的課程在教導學員使用 <a href="https://www.lua.org/">Lua</a> 程式語言, 並利用 <a href="https://www.lua.org/">Lua</a> 程式語言控制 <a href="http://www.coppeliarobotics.com/">V-rep</a> 平台中的機器人系統.</p>
<p><span style="background-color: #ffff00;">使用工具</span></p>
<p>可攜程式套件: <a href="https://drive.google.com/file/d/1ekR_kri-_UWlTd_f1vZano0N2-zzQUTn/view?usp=sharing">kmol_level1</a></p>
<p>機器人模擬平台: <a href="http://www.coppeliarobotics.com/">V-rep</a></p>
<p>程式語言: Lua</p>
<p><span style="background-color: #ffff00;">執行內容</span></p>
<p>第九週前以 3 人一組, 完成下列要求:</p>
<ol>
<li>整理 <a href="https://github.com/mdecourse/vecp2018/issues/11">https://github.com/mdecourse/vecp2018/issues/11</a> 中所列出的 Lua 程式語法</li>
<li>利用 <a href="http://mde.tw/vecp2018/lua/SchoolProject/">http://mde.tw/vecp2018/lua/SchoolProject/</a> 繪製虎尾科技大學校徽</li>
<li>利用 <a href="http://mde.tw/vecp2018/lua/SchoolProject/">http://mde.tw/vecp2018/lua/SchoolProject/</a> 繪製美國國旗</li>
<li>請將上述內容寫在各組的 vecp2018 倉儲中</li>
</ol>
<h3>Lua 程式範例</h3>
<p>以下為&nbsp;<a href="https://github.com/mdecourse/vecp2018/blob/gh-pages/v-rep/YouBot_interactive.ttt">https://github.com/mdecourse/vecp2018/blob/gh-pages/v-rep/YouBot_interactive.ttt</a>&nbsp;場景中的控制程式</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 角度轉徑度函式
function deg2rad(deg)
   return deg*math.pi/180
end

-- 徑度轉角度函式
function rad2deg(rad)
   return rad*180/math.pi
end

-- null 函式
function nullFunc(arg)
   return arg
end

-- 切換徑度函式
function toggleRadians(ui,id,newVal)
   if (newVal==2) then
	  angleTo = deg2rad
	  angleFrom = rad2deg
   else
	  angleTo = nullFunc
	  angleFrom = nullFunc
   end	  
end

-- 設定各軸角度
applyJoints=function(jointHandles,joints)
    for i=1,#jointHandles,1 do
        simSetJointPosition(jointHandles[i],joints[i])
    end
end

-- 取得各軸角度
getJoints=function(jointHandles,angles)
   angles={0,0,0,0,0,0,0,0}
   for i=1,#jointHandles,1 do
	  angles[i]=simGetJointPosition(jointHandles[i])
   end
   return angles
end

-- 更新各軸角度字串
updateActualText=function(jointHandles, angles)
   local ang_str="( "
   for i=1,#jointHandles,1 do
	  -- simExtCustomUI_setLabelText(ui,5000+i,string.format('Actual = %+6.3f', angles[i]))
	  ang_str=ang_str..string.format("%6.3f, ", angles[i])
   end
   ang_str=string.sub(ang_str,1,-3)
   ang_str=ang_str.."  )"
   simExtCustomUI_setLabelText(ui,1237,ang_str)
end

function changeAllSliders(ui,q)
   for i=1,#jh,1 do
	  simExtCustomUI_setSliderValue(ui,4000+i,q[i]*1000)
	  simExtCustomUI_setLabelText(ui,3000+i,string.format('Reference = %+6.3f',q[i]))
   end
end

function sliderChange(ui,id,newVal)
   for i=1,#jh,1 do
	  if (id==4000+i) then
		 simExtCustomUI_setLabelText(ui,3000+i,string.format('Reference = %+6.3f',newVal/1000))
		 ref_ang[i]=newVal/1000
		 break
	  end
   end
end

function mysplit(inputstr, sep)
   if sep == nil then
	  sep = "%s"
   end
   local t={}
   for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
	  table.insert(t,str)
   end
   return t
end

function fulljointEntry(ui,id,newVal)
   if (newVal==enteredString) then
	  enteredString=newVal
	  out=string.format("Already processed and sent this string... try editing")
	  simExtCustomUI_setLabelText(ui, 1236, out)
	  return
   end
   enteredString=newVal
   local q=mysplit(newVal,",")
   local out=""
   if (#q==0) then
	  out=string.format("No conversions completed &lt;br&gt; Are you separating with commas?")
	  simExtCustomUI_setLabelText(ui, 1236, out)
	  return
   elseif (#q&lt;#jh) then
	  out=string.format("Not enough configuration variables specified")
	  simExtCustomUI_setLabelText(ui, 1236, out)
	  return
   elseif (#q&gt;#jh) then
	  out=string.format("Too many configuration variables specified")
	  simExtCustomUI_setLabelText(ui, 1236, out)
	  return
   end
   for i=1,#q,1 do
	  qtest=tonumber(q[i])
	  if (qtest==nil) then
		 out=string.format("Could not convert entry number %d:&lt;br&gt; Entered='",i,q[i])..q[i].."'"
		 simExtCustomUI_setLabelText(ui, 1236, out)
		 return
	  else
		 q[i]=qtest
	  end
   end
   simExtCustomUI_setLabelText(ui, 1236, "Successful conversion:&lt;br&gt;"..newVal)
   changeAllSliders(ui, q)
   ref_ang = q
end


function jointEntry(ui,id,newVal)
   angle = tonumber(newVal)
   if (angle==nil) then
	  print("Could not convert number..."..newVal)
	  return
   end
   -- if (angle &gt;= 2*math.pi) then
   -- 	  print("Clipping angle to 2pi")
   -- 	  angle = 2*math.pi
   -- end
   -- if (angle &lt;= -2*math.pi) then
   -- 	  print("Clipping angle to -2pi")
   -- 	  angle = -2*math.pi
   -- end
   for i=1,#jh,1 do
	  if (id==7000+i) then
		 simExtCustomUI_setLabelText(ui,3000+i,string.format('Reference = %+6.3f',angle))
		 ref_ang[i]=angle
		 changeAllSliders(ui, ref_ang)
		 break
	  end
   end
end


function eul2so3_xyzr(a,b,c)
   -- Build empty array
   R = {}
   for i=1,3,1 do
	  R[i] = {}
	  for j=1,3,1 do
		 R[i][j] = 0
	  end
   end

   -- calculate constants
   local c1,s1 = math.cos(a),math.sin(a)
   local c2,s2 = math.cos(b),math.sin(b)
   local c3,s3 = math.cos(c),math.sin(c)
   
   -- fill out values:
   -- https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix
   R[1][1] = c2*c3
   R[1][2] = -c2*s3
   R[1][3] = s2
   R[2][1] = c1*s3+c3*s1*s2
   R[2][2] = c1*c3-s1*s2*s3
   R[2][3] = -c2*s1
   R[3][1] = s1*s3-c1*c3*s2
   R[3][2] = c3*s1+c1*s2*s3
   R[3][3] = c1*c2
   return R
end

function so3andp2se3(R,p)
   local g = {}
   for i=1,4,1 do
	  g[i] = {}
	  for j=1,4,1 do
		 if (i&lt;=3) then
			if (j&lt;=3) then
			   g[i][j] = R[i][j]
			else
			   g[i][j] = p[i]
			end
		 else
			if (j&lt;=3) then
			   g[i][j] = 0
			else
			   g[i][j] = 1
			end
		 end
	  end
   end
   return g
end

function createSE3string(pos,ori)
   -- first let's convert the orientation into an SE(3) matrix:
   local R=eul2so3_xyzr(ori[1], ori[2], ori[3])
   local g=so3andp2se3(R,pos)
   local out="&lt;b&gt;&lt;big&gt;&lt;tt&gt;"
   for i=1,4,1 do
	  out=out.."| "
	  for j=1,4,1 do
		 out=out..string.format(" %+6.3f",g[i][j])
	  end
	  out=out.." | &lt;br&gt;"
   end
   out=out.."&lt;/tt&gt;&lt;/big&gt;&lt;/b&gt;"
   return out
end

function calcSE3(ui, id, target, reference)
   pos=simGetObjectPosition(target,reference)
   ori=simGetObjectOrientation(target,reference)
   if pos and ori then
	  out=createSE3string(pos,ori)
	  simExtCustomUI_setLabelText(ui,id,out)
   end
end

function closeEventHandler(h)
    simAddStatusbarMessage('Window '..h..' is closing...')
    simExtCustomUI_hide(h)
end

if (sim_call_type==sim_childscriptcall_initialization) then
   -- joint limits:
   --    X: (-2, 2)
   --    Y: (-2, 2)
   --   Th: (-360, 360)
   --    1: (-168, 168)
   --    2: (-64, 89)
   --    3: (-150, 145)
   --    4: (-102, 102)
   --    5: (-160, 160)
   
   xml = [[
   &lt;ui closeable="false" onclose="closeEventHandler" resizable="true"&gt;
     &lt;tabs&gt;

	   &lt;tab title="Enter Config and SE(3) Value"&gt;
		 &lt;group&gt;
		   &lt;group layout="vbox"&gt;
			 &lt;label text="&lt;big&gt; Configuration Entry:&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt;
			 &lt;label text="Enter 8 comma-separated angles" /&gt;
			 &lt;edit value="" oneditingfinished="fulljointEntry" /&gt;
			 &lt;label value="" wordwrap="false" /&gt;
			 &lt;label text="&lt;big&gt; Current configuration:&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt;
			 &lt;group layout="vbox"&gt;
			   &lt;label value="" id="1237" wordwrap="true" /&gt;
			 &lt;/group&gt;
			 &lt;label text="&lt;big&gt; Messages:&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt;
			 &lt;group layout="vbox"&gt;
			   &lt;label value="" id="1236" wordwrap="true" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;
		   &lt;group&gt;
			 &lt;!-- &lt;group&gt; --&gt;
			   &lt;label text="&lt;big&gt; Current SE(3) (world to end-effector):&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt;
			   &lt;!-- &lt;button text="Calculate SE(3) transform:" onclick="calcSE3" id="1235"/&gt; --&gt;
			   &lt;label text="T(&Icirc;&cedil;) = " wordwrap="false" /&gt;
			   &lt;label text="" id="1234" wordwrap="false" /&gt;
			 &lt;!-- &lt;/group&gt; --&gt;
			  &lt;!-- &lt;group&gt; --&gt;
			  &lt;!--   &lt;label text="&lt;big&gt; Settings:&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt; --&gt;
			  &lt;!--   &lt;checkbox text="Use degrees instead of radians?" checked="false" onchange="toggleRadians" /&gt; --&gt;
			  &lt;!-- &lt;/group&gt; --&gt;
		   &lt;/group&gt;
		   &lt;group&gt;
			 &lt;!-- &lt;group&gt; --&gt;
			   &lt;label text="&lt;big&gt; Current SE(3) (world to youBot base):&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt;
			   &lt;!-- &lt;button text="Calculate SE(3) transform:" onclick="calcSE3" id="1235"/&gt; --&gt;
			   &lt;label text="T(&Icirc;&cedil;) = " wordwrap="false" /&gt;
			   &lt;label text="" id="1235" wordwrap="false" /&gt;
			 &lt;!-- &lt;/group&gt; --&gt;
			  &lt;!-- &lt;group&gt; --&gt;
			  &lt;!--   &lt;label text="&lt;big&gt; Settings:&lt;/big&gt;" wordwrap="false" style="font-weight: bold;"/&gt; --&gt;
			  &lt;!--   &lt;checkbox text="Use degrees instead of radians?" checked="false" onchange="toggleRadians" /&gt; --&gt;
			  &lt;!-- &lt;/group&gt; --&gt;
		   &lt;/group&gt;
           &lt;stretch /&gt;
		 &lt;/group&gt;
	   &lt;/tab&gt;

	   
       &lt;tab title="Joint Angle Sliders"&gt;
		 &lt;group layout="grid" &gt;
           &lt;group&gt;
			 &lt;group layout="grid"&gt;
               &lt;label text="&lt;big&gt; Chassis X:&lt;/big&gt;" id="6001" wordwrap="false" style="font-weight: bold;"/&gt;
               &lt;label text="Reference =  0.000" id="3001" wordwrap="false" /&gt;
               &lt;!-- &lt;label text="Actual =  0.000" id="5001" wordwrap="false" /&gt; --&gt;
			 &lt;/group&gt;
			 &lt;hslider id="4001" tick-position="above" tick-interval="333" minimum="-2000" maximum="2000" onchange="sliderChange" /&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="Enter position (m):" /&gt;
			   &lt;edit value="" id="7001" oneditingfinished="jointEntry" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;
		   
		   &lt;group&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="&lt;big&gt; Arm 2:&lt;/big&gt;" id="6005" wordwrap="false" style="font-weight: bold;"/&gt;
			   &lt;label text="Reference =  0.000" id="3005" wordwrap="false" /&gt;
			   &lt;!-- &lt;label text="Actual =  0.000" id="5005" wordwrap="false" /&gt; --&gt;
			 &lt;/group&gt;
			 &lt;hslider id="4005" tick-position="above" tick-interval="222" minimum="-1117" maximum="1553" onchange="sliderChange" /&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="Enter joint angle (rad):" /&gt;
			   &lt;edit value="" id="7005" oneditingfinished="jointEntry" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;
		   
		   &lt;br/&gt;
		   
		   &lt;group&gt;
			 &lt;group layout="grid"&gt;
               &lt;label text="&lt;big&gt; Chassis Y:&lt;/big&gt;" id="6002" wordwrap="false" style="font-weight: bold;"/&gt;
               &lt;label text="Reference =  0.000" id="3002" wordwrap="false" /&gt;
               &lt;!-- &lt;label text="Actual =  0.000" id="5002" wordwrap="false" /&gt; --&gt;
			 &lt;/group&gt;
			 &lt;hslider id="4002" tick-position="above" tick-interval="333" minimum="-2000" maximum="2000" onchange="sliderChange" /&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="Enter position (m):" /&gt;
			   &lt;edit value="" id="7002" oneditingfinished="jointEntry" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;

		   
		   &lt;group&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="&lt;big&gt; Arm 3:&lt;/big&gt;" id="6006" wordwrap="false" style="font-weight: bold;"/&gt;
			   &lt;label text="Reference =  0.000" id="3006" wordwrap="false" /&gt;
			   &lt;!-- &lt;label text="Actual =  0.000" id="5006" wordwrap="false" /&gt; --&gt;
			 &lt;/group&gt;
			 &lt;hslider id="4006" tick-position="above" tick-interval="429" minimum="-2620" maximum="2530" onchange="sliderChange" /&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="Enter joint angle (rad):" /&gt;
			   &lt;edit value="" id="7006" oneditingfinished="jointEntry" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;

		   &lt;br/&gt;
		   
		   &lt;group&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="&lt;big&gt; Chassis &Iuml;:&lt;/big&gt;" id="6003" wordwrap="false" style="font-weight: bold;"/&gt;
			   &lt;label text="Reference =  0.000" id="3003" wordwrap="false" /&gt;
			   &lt;!-- &lt;label text="Actual =  0.000" id="5003" wordwrap="false" /&gt; --&gt;
			 &lt;/group&gt;
			 &lt;hslider id="4003" tick-position="above" tick-interval="523" minimum="-3140" maximum="3140" onchange="sliderChange" /&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="Enter joint angle (rad):" /&gt;
			   &lt;edit value="" id="7003" oneditingfinished="jointEntry" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;

		   &lt;group&gt;
		   	 &lt;group layout="grid"&gt;
		   	   &lt;label text="&lt;big&gt; Arm 4:&lt;/big&gt;" id="6007" wordwrap="false" style="font-weight: bold;"/&gt;
		   	   &lt;label text="Reference =  0.000" id="3007" wordwrap="false" /&gt;
		   	   &lt;!-- &lt;label text="Actual =  0.000" id="5007" wordwrap="false" /&gt; --&gt;
		   	 &lt;/group&gt;
		   	 &lt;hslider id="4007" tick-position="above" tick-interval="296" minimum="-1780" maximum="1780" onchange="sliderChange" /&gt;
		   	 &lt;group layout="grid"&gt;
		   	   &lt;label text="Enter joint angle (rad):" /&gt;
		   	   &lt;edit value="" id="7007" oneditingfinished="jointEntry" /&gt;
		   	 &lt;/group&gt;
		   &lt;/group&gt;

		   &lt;br/&gt;
		   
		   &lt;group&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="&lt;big&gt; Arm 1:&lt;/big&gt;" id="6004" wordwrap="false" style="font-weight: bold;"/&gt;
			   &lt;label text="Reference =  0.000" id="3004" wordwrap="false" /&gt;
			   &lt;!-- &lt;label text="Actual =  0.000" id="5004" wordwrap="false" /&gt; --&gt;
			 &lt;/group&gt;
			 &lt;hslider id="4004" tick-position="above" tick-interval="488" minimum="-2932" maximum="2932" onchange="sliderChange" /&gt;
			 &lt;group layout="grid"&gt;
			   &lt;label text="Enter joint angle (rad):" /&gt;
			   &lt;edit value="" id="7004" oneditingfinished="jointEntry" /&gt;
			 &lt;/group&gt;
		   &lt;/group&gt;

		   &lt;group&gt;
		   	 &lt;group layout="grid"&gt;
		   	   &lt;label text="&lt;big&gt; Arm 5:&lt;/big&gt;" id="6008" wordwrap="false" style="font-weight: bold;"/&gt;
		   	   &lt;label text="Reference =  0.000" id="3008" wordwrap="false" /&gt;
		   	   &lt;!-- &lt;label text="Actual =  0.000" id="5008" wordwrap="false" /&gt; --&gt;
		   	 &lt;/group&gt;
		   	 &lt;hslider id="4008" tick-position="above" tick-interval="481" minimum="-2890" maximum="2890" onchange="sliderChange" /&gt;
		   	 &lt;group layout="grid"&gt;
		   	   &lt;label text="Enter joint angle (rad):" /&gt;
		   	   &lt;edit value="" id="7008" oneditingfinished="jointEntry" /&gt;
		   	 &lt;/group&gt;
		   &lt;/group&gt;
		   
		 &lt;/group&gt;
		 
	   &lt;/tab&gt;

    &lt;/tabs&gt;
&lt;/ui&gt;
]]
    ui=simExtCustomUI_create(xml)
	-- get joints:
	jh={-1,-1,-1,-1,-1,-1,-1,-1}
	jh[1]=simGetObjectHandle('World_X_Joint')
	jh[2]=simGetObjectHandle('World_Y_Joint')
	jh[3]=simGetObjectHandle('World_Th_Joint')
    for i=4,#jh,1 do
	   jh[i]=simGetObjectHandle('Joint'..(i-3))
    end
	-- for i=1,#jh,1 do
	--    print(string.format("jh[%d] = %d",i,jh[i]))
	-- end
	-- base=simGetObjectHandle('ArmBase_Frame')
	world=simGetObjectHandle('WorldFrame')
	base=simGetObjectHandle('BaseVisual')
	ee=simGetObjectHandle('EE_Frame')
	-- fill out initial string:
	calcSE3(ui, 1234, ee, world)
	calcSE3(ui, 1235, base, world)
	-- array for reference angle
	ref_ang={0,0,0,0,0,0,0,0}
	-- array for storing when angles where manually entered
	enteredString=""
	-- angle parsing
	toggleRadians(ui,0,0)
end


if (sim_call_type==sim_childscriptcall_actuation) then
   applyJoints(jh, ref_ang)
   -- array for actual angle
   act_ang = getJoints(jh)
   updateActualText(jh, act_ang)
   calcSE3(ui, 1234, ee, world)
   calcSE3(ui, 1235, base, world)
end

if (sim_call_type==sim_childscriptcall_sensing) then
   
end

if (sim_call_type==sim_childscriptcall_cleanup) then
    simExtCustomUI_destroy(ui)
end
</pre>
<p>&nbsp;</p>
<h1>網際內容管理</h1>
<p>這是位於 <a href="https://www.heroku.com">heroku</a> 的 <a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a> 網站, 由於能在網頁中維護的 <a href="https://www.heroku.com">heroku</a> 網站, 必須與其他雲端儲存系統結合, 而本站是在近端維護後, 提交推送到 <a href="https://www.heroku.com">heroku</a>, 因此目前只能展示&nbsp;<a href="https://git.heroku.com/wcms-scrum3.git">https://git.heroku.com/wcms-scrum3.git</a>&nbsp;倉儲中的網際內容資料, 透過瀏覽器修改的內容, 將會不定期遭 <a href="https://www.heroku.com">heroku</a> 刪除.</p>
<p>儘管如此, 在近端維護後提交推送到遠端的資料維護模式, 仍可用來呈現網際內容管理相關程式的執行結果.</p>
<p>例如:</p>
<p><a href="/w1cda">w1cda 分組程式</a>&nbsp;</p>
<p><a href="/w7cda">w7cda 列出缺席名單</a></p>
<p><a href="/w5cdb">w5cdb 列出缺席名單</a></p>
<p><a href="/w7cdb">w7cdb 列出缺席名單</a></p>
<p><a href="/vecpw7">vecpw7 列出缺席名單</a></p>
<!-- add Lua -->
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">tinymce4 設定: 
extended_valid_elements:"script[language|type|src]", 
允許在編輯器中納入 script 標註 </pre>
<p>&nbsp;</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">將 tinymce4 設定格式從 xhtml 改為 html, 可以避開 cdata 插入問題:
element_format : "html",</pre>
<p id="target_position">&nbsp;</p>
<p>列出上述內容的 Lua 程式碼如下:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- &lt;script src="/static/fengari-web.js"&gt;&lt;/script&gt;

-- &lt;script type="application/lua"&gt;
local js = require "js"
local window = js.global
output = ""
for i=1, 5 do
    output = output .. tostring(i).. ": hello Lua<br>"
end
window.document:getElementById("here").innerHTML=output
window.document:getElementById("here1").innerHTML="here1"
-- 選定插入字串位置
d1 = window.document:getElementById('target_position')
-- 插在標註起始之前
d1:insertAdjacentHTML('beforeBegin', 'hello, Lua')
-- &lt;/script&gt;</pre>
<p id="here1">&nbsp;</p>
<p id="here">&nbsp;</p>
<!-- 導入外部的 ext1.lua 程式內容 -->
<p>
<script type="application/lua">
local js = require "js"
local window = js.global
output = ""
for i=1, 5 do
    output = output .. tostring(i).. ": hello Lua<br />"
end
window.document:getElementById("here").innerHTML=output
window.document:getElementById("here1").innerHTML="here1"
-- 選定插入字串位置
d1 = window.document:getElementById('target_position')
-- 插在標註起始之前
d1:insertAdjacentHTML('beforeBegin', 'hello, Lua')
</script>
</p>
<h2>使用流程</h2>
<p><span style="background-color: #ffff00;">登入 heroku</span></p>
<p>先在近端啟動 CMSimfly, 設法以網際模式協同維護內容後, 以 heroku login 登入 Heroku , 將近端內容提交推送到 Heroku 與同步 github 倉儲.</p>
<p>設定 proxy 代理主機</p>
<p>set http_proxy=http://your_proxy_server:port</p>
<p>heroku login</p>
<p>git clone or git pull 後以 python&nbsp; app_run.py 啟動, 並以瀏覽器打開 <a>http://localhost:5000</a></p>
<p><span style="background-color: #ffff00;">平行批次檔指令</span></p>
<p>由於在近端啟動 CMSimfly 網站時, 希望以 batch 指令同時啟動 Flask 網際程式與近端網頁, 這時需要利用能平行開啟執行的 MParallel 工具, 從&nbsp;<a href="https://github.com/lordmulder/MParallel">https://github.com/lordmulder/MParallel&nbsp;</a>&nbsp;下載 mparallet.exe 後, 放入可攜系統的 y:\ 目錄, 建立 run.bat 如下:</p>
<pre class="brush:ps;auto-links:false;toolbar:false" contenteditable="false">MParallel.exe --count=2 python app_run.py : C:\Program Files (x86)\Google\Chrome\Application\chrome.exe "http://localhost:5000"
</pre>
<p>啟動後便可同時執行近端 app_run.py 與 chrome 網頁開啟.</p>
<p><span style="background-color: #ffff00;">在近端維護網站內容</span></p>
<p>CMSimfly&nbsp; 在區網或廣域網路中執行, 登入後可以維護網站內容</p>
<p><span style="background-color: #ffff00;">提交推送網站版本</span></p>
<p>提交推送到 Heroku</p>
<p>git add .</p>
<p>git commit -m "提交新版本"</p>
<p>git push</p>
<p><span style="background-color: #ffff00;">同步提交推送到 Github</span></p>
<p>先設定 git remote add 到對應的 github 空倉儲</p>
<p>以下將 git url 在此倉儲下, 將 remote add 的對應命名為 github</p>
<p>git remote add github <a href="https://github.com/mdecourse/wcms-scrum3.git">https://github.com/mdecourse/wcms-scrum3.git</a></p>
<p>接著再將版本推送到 wcm-scrum3</p>
<p>git push github</p>
<h2>與 Google 表單結合</h2>
<p>Google forms:&nbsp;<a href="https://www.google.com/intl/zh-TW_tw/forms/about/">https://www.google.com/intl/zh-TW_tw/forms/about/</a>&nbsp;</p>
<p>網際內容管理與 <a href="https://docs.google.com/forms">Google 表單</a>結合, 可以直接在雲端上建立問卷, 由使用者填寫後, 轉為資料檔後, 經由雲端程式解讀後, 將結果以網頁顯示.</p>
<p>WCMS 課程第七週分組作業:</p>
<p>請各組根據系上軟體套件清單, 製作電腦教室開課使用套件調查表, 以電腦郵件發出問卷連結後, 整理取得的資料後, 將各課程所使用的軟體套件顯示在雲端網站中.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h1>課程問卷</h1>
<p>&nbsp;</p>
<p><iframe width="760" height="500" src="https://docs.google.com/forms/d/e/1FAIpQLSddIJHftwNm09fqH8ee37TqxDvyRvXHSC0xbdU2b9ClfYo5yQ/viewform?embedded=true" frameborder="0" marginwidth="0" marginheight="0">Loading...</iframe></p>
<h1>學習 Lua</h1>
<p><a href="/lua">Lua 網際程式環境</a></p>
<p>以下為網際 Lua 系統中的 <a href="/lua?filename=fun1">Canvas 繪圖範例</a>:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local global = js.global
local document = global.document
-- html 檔案中 canvas　id 設為 "canvas"
local canvas = document:getElementById("canvas")
-- 將 ctx 設為 canvas 2d 繪圖畫布變數
local ctx = canvas:getContext("2d")

-- 屬性呼叫使用 . 而方法呼叫使用 :
-- 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
-- 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"

-- 乘上 deg 可轉為徑度單位
deg = math.pi / 180

-- 建立多邊形定點位置畫線函式
function star(radius, xc, yc, n)
    --radius = 100
    --xc = 200
    --yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx:beginPath()
    ctx:moveTo(xi,yi)
    for i = 2, n+1 do
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx:lineTo(x,y)
    end
end

-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
-- 畫五邊形框線
star(100, 200, 200, 5)
ctx:closePath()
ctx:stroke()

-- 填三角形色塊
star(50, 350, 200, 3)
ctx:closePath()
ctx:fill()

-- 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 450, 200, 7)
ctx:closePath()
ctx:stroke()
    </pre>
<h2>網際繪圖1</h2>
<p><a href="https://brython.info/">Brython</a> 與 <a href="https://github.com/fengari-lua/fengari-web">Fengari-web</a> 都可以透過 scripting 的方式在網際繪圖, 前者使用 Python3 語法, 而後者使用 Lua 程式語法, Brython 目前的 brython-dist.js 高達 3.7 MB, 而 fengari-web.js 只需要 233 KB.</p>
<p><a href="http://lab.kmol.info/blog/brython-programming-environment.html">http://lab.kmol.info/blog/brython-programming-environment.html</a>&nbsp;說明如何使用 Brython 進行與機械設計領域相關的網際繪圖, 在此, 則希望利用 Lua 進行相同效果的網際程式設計.</p>
<p>由於本網際內容管理程式使用 Tinymce4 網際編輯器套件, 因此為了讓 CMSimfly 編輯器中可以輸入 script 與 canvas 等網際繪圖相關的 html 標註, 必須要修改相關設定:</p>
<p>首先必須將原先使用的 xhtml 格式, 改為 html, 以避開為了滿足 xhtml 格式的 CDATA 註解資料.</p>
<p>接下來則需開啟 script 與 canvas 標註的輸入, 不至於被 Tinymce4 濾除, 其中 canvas 的開放, 需要使用 valid_elements 設定, 以開啟所有標註達成, 而 script 則利用 extended_valid_elements 設定完成.</p>
<p>修改上述設定後, 便可直接在 CMSimfly 編輯器中, 直接輸入各種與 fengari-web 相關的網際&nbsp; Lua 程式設計內容.</p>
<p>以下允許所有的 html 標註, 並且可以利用 lua 進行網際繪圖:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">  valid_elements : '*[*]',
  extended_valid_elements: "script[language|type|src]",</pre>
<p>以下則使用一般 Lua 程式繪圖:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">&lt;canvas id="canvas" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;p&gt;
&lt;script type="application/lua"&gt;
-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local global = js.global
local document = global.document
-- html 檔案中 canvas　id 設為 "canvas"
local canvas = document:getElementById("canvas")
-- 將 ctx 設為 canvas 2d 繪圖畫布變數
local ctx = canvas:getContext("2d")
 
-- 屬性呼叫使用 . 而方法呼叫使用 :
-- 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
-- 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
 
-- 乘上 deg 可轉為徑度單位
deg = math.pi / 180
 
-- 建立多邊形定點位置畫線函式
function star(radius, xc, yc, n)
    --radius = 100
    --xc = 200
    --yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx:beginPath()
    ctx:moveTo(xi,yi)
    for i = 2, n+1 do
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx:lineTo(x,y)
    end
end
 
-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
-- 畫五邊形框線
star(100, 200, 200, 5)
ctx:closePath()
ctx:stroke()
 
-- 填三角形色塊
star(50, 350, 200, 3)
ctx:closePath()
ctx:fill()
 
-- 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 450, 200, 7)
ctx:closePath()
ctx:stroke()
&lt;/script&gt;</pre>
<p><canvas id="canvas" width="600" height="400"></canvas></p>
<p>
<script type="application/lua">
-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local global = js.global
local document = global.document
-- html 檔案中 canvas　id 設為 "canvas"
local canvas = document:getElementById("canvas")
-- 將 ctx 設為 canvas 2d 繪圖畫布變數
local ctx = canvas:getContext("2d")
 
-- 屬性呼叫使用 . 而方法呼叫使用 :
-- 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
-- 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
 
-- 乘上 deg 可轉為徑度單位
deg = math.pi / 180
 
-- 建立多邊形定點位置畫線函式
function star(radius, xc, yc, n)
    --radius = 100
    --xc = 200
    --yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx:beginPath()
    ctx:moveTo(xi,yi)
    for i = 2, n+1 do
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx:lineTo(x,y)
    end
end
 
-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
-- 畫五邊形框線
star(100, 200, 200, 5)
ctx:closePath()
ctx:stroke()
 
-- 填三角形色塊
star(50, 350, 200, 3)
ctx:closePath()
ctx:fill()
 
-- 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 450, 200, 7)
ctx:closePath()
ctx:stroke()
</script>
</p>
<p>以下則使用 Lua 的物件導向程式設計繪圖: <canvas id="canvas1" width="600" height="400"></canvas></p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">&lt;canvas id="canvas1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="application/lua"&gt;
-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local global = js.global
local document = global.document
-- html 檔案中 canvas　id 設為 "canvas"
local canvas = document:getElementById("canvas1")
-- 將 ctx 設為 canvas 2d 繪圖畫布變數
local ctx = canvas:getContext("2d")

-- 屬性呼叫使用 . 而方法呼叫使用 :
-- 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
-- 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"

-- 乘上 deg 可轉為徑度單位
deg = math.pi / 180

-- 建立多邊形定點位置畫線函式
local star = {}
star.__index = star

function star.new(radius, xc, yc, n, sof)
    --radius = 100
    --xc = 200
    --yc = 200
    local self = setmetatable({}, star)
    self.radius = radius
    self.xc = xc
    self.yc = yc
    self.n = n
    -- stroke or fill
    self.sof = sof
    --return self
--end

--function star.plot(self)
    xi = self.xc + self.radius*math.cos((360/self.n)*deg+90*deg)
    yi = self.yc - self.radius*math.sin((360/self.n)*deg+90*deg)
    ctx:beginPath()
    ctx:moveTo(xi,yi)
    for i = 2, self.n+1 do
	x = self.xc + self.radius*math.cos((360/self.n)*deg*i+90*deg)
	y = self.yc - self.radius*math.sin((360/self.n)*deg*i+90*deg)
	ctx:lineTo(x,y)
    end
    ctx:closePath()
    if self.sof == true then
	ctx:stroke()
    else
	ctx:fill()
    end
end

-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
-- 畫五邊形框線
star1 = star.new(100, 200, 200, 5, true)
--star1:plot()

-- 填三角形色塊
star2 = star.new(50, 350, 200, 3, false)
--star2:plot()

-- 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star3 = star.new(50, 450, 200, 7, true)
--star3:plot()
&lt;/script&gt;</pre>
<p></p>
<p>
<script type="application/lua">
-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local global = js.global
local document = global.document
-- html 檔案中 canvas　id 設為 "canvas"
local canvas = document:getElementById("canvas1")
-- 將 ctx 設為 canvas 2d 繪圖畫布變數
local ctx = canvas:getContext("2d")

-- 屬性呼叫使用 . 而方法呼叫使用 :
-- 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
-- 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"

-- 乘上 deg 可轉為徑度單位
deg = math.pi / 180

-- 建立多邊形定點位置畫線函式
local star = {}
star.__index = star

function star.new(radius, xc, yc, n, sof)
    --radius = 100
    --xc = 200
    --yc = 200
    local self = setmetatable({}, star)
    self.radius = radius
    self.xc = xc
    self.yc = yc
    self.n = n
    -- stroke or fill
    self.sof = sof
    --return self
--end

--function star.plot(self)
    xi = self.xc + self.radius*math.cos((360/self.n)*deg+90*deg)
    yi = self.yc - self.radius*math.sin((360/self.n)*deg+90*deg)
    ctx:beginPath()
    ctx:moveTo(xi,yi)
    for i = 2, self.n+1 do
	x = self.xc + self.radius*math.cos((360/self.n)*deg*i+90*deg)
	y = self.yc - self.radius*math.sin((360/self.n)*deg*i+90*deg)
	ctx:lineTo(x,y)
    end
    ctx:closePath()
    if self.sof == true then
	ctx:stroke()
    else
	ctx:fill()
    end
end

-- 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
-- 畫五邊形框線
star1 = star.new(100, 200, 200, 5, true)
--star1:plot()

-- 填三角形色塊
star2 = star.new(50, 350, 200, 3, false)
--star2:plot()

-- 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star3 = star.new(50, 450, 200, 7, true)
--star3:plot()
</script>
</p><h2>網際繪圖2</h2>
<p>假如 Fegari-web 結合&nbsp;<a href="https://github.com/kripken/sql.js">https://github.com/kripken/sql.js</a>&nbsp;可以使用 SQLite 儲存相關資料, 將機械設計流程分別存入各內容管理頁面中.</p>
<p>必須在 fengari-web 之外, 導入 sql.js</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="fengari-web.js"&gt;&lt;/script&gt;
&lt;!-- 導入 sql.js --&gt;
&lt;script src="sql/sql.js"&gt;&lt;/script&gt;</pre>
<p>範例程式如下:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">-- 導入 "js" 模組
local js = require "js"
-- global 就是 javascript 的 window
local window = js.global

sql = window.SQL
db = js.new(sql.Database)
-- Execute some sql
sqlstr = "CREATE TABLE hello (a int, b char);"
sqlstr = sqlstr .. "INSERT INTO hello VALUES (0, 'hello');"
sqlstr = sqlstr .. "INSERT INTO hello VALUES (1, 'world');"
db:run(sqlstr) -- Run the query without returning anything
res = db:exec("SELECT * FROM hello")
for k, v in pairs(res) do
    for i, j in pairs(v) do
     print("k=",k)
     print("v=",v)
     print("i=",i)
     print("j=",j)
    end
end
</pre>
<p></p><h1>Brython</h1><p>正齒輪繪圖</p><p><script>window.onload=function(){// 設定 data/py 為共用程式路徑brython({debug:1, pythonpath:['./']});}</script></p><!-- 以下實際利用  Brython 繪圖--><p><canvas id="onegear" width="800" height="600"></canvas></p><p><script type="text/python3">from browser import document as docimport math# deg 為角度轉為徑度的轉換因子deg = math.pi/180.# 定義 Spur 類別class Spur(object):    def __init__(self, ctx):        self.ctx = ctx    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):        self.ctx.beginPath()        self.ctx.lineWidth = width        self.ctx.moveTo(x1, y1)        self.ctx.lineTo(x2, y2)        self.ctx.strokeStyle = fill        self.ctx.stroke()    #    # 定義一個繪正齒輪的繪圖函式    # midx 為齒輪圓心 x 座標    # midy 為齒輪圓心 y 座標    # rp 為節圓半徑, n 為齒數    # pa 為壓力角 (deg)    # rot 為旋轉角 (deg)    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):        # 齒輪漸開線分成 15 線段繪製        imax = 15        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線        self.create_line(midx, midy, midx, midy-rp)        # 畫出 rp 圓, 畫圓函式尚未定義        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數        # 模數也就是齒冠大小        a=2*rp/n        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍        d=2.5*rp/n        # ra 為齒輪的外圍半徑        ra=rp+a        # 畫出 ra 圓, 畫圓函式尚未定義        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)        # rb 則為齒輪的基圓半徑        # 基圓為漸開線長齒之基準圓        rb=rp*math.cos(pa*deg)        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)        # rd 為齒根圓半徑        rd=rp-d        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小        # 將圓弧分成 imax 段來繪製漸開線        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd        if rd>rb:            dr = (ra-rd)/imax        else:            dr=(ra-rb)/imax        # tan(pa*deg)-pa*deg 為漸開線函數        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg        for j in range(n):            ang=-2.*j*math.pi/n+sigma            ang2=2.*j*math.pi/n+sigma            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)            for i in range(imax+1):                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd                if rd>rb:                    r=rd+i*dr                else:                    r=rb+i*dr                theta=math.sqrt((r*r)/(rb*rb)-1.)                alpha=theta-math.atan(theta)                xpt=r*math.sin(alpha-ang)                ypt=r*math.cos(alpha-ang)                xd=rd*math.sin(-ang)                yd=rd*math.cos(-ang)                # i=0 時, 繪線起點由齒根圓上的點, 作為起點                if(i==0):                    last_x = midx+xd                    last_y = midy-yd                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)                # 最後一點, 則為齒頂圓                if(i==imax):                    lfx=midx+xpt                    lfy=midy-ypt                last_x = midx+xpt                last_y = midy-ypt            # the line from last end of dedendum point to the recent            # end of dedendum point            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標            # 下列為齒根圓上用來近似圓弧的直線            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)            for i in range(imax+1):                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd                if rd>rb:                    r=rd+i*dr                else:                    r=rb+i*dr                theta=math.sqrt((r*r)/(rb*rb)-1.)                alpha=theta-math.atan(theta)                xpt=r*math.sin(ang2-alpha)                ypt=r*math.cos(ang2-alpha)                xd=rd*math.sin(ang2)                yd=rd*math.cos(ang2)                # i=0 時, 繪線起點由齒根圓上的點, 作為起點                if(i==0):                    last_x = midx+xd                    last_y = midy-yd                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)                # 最後一點, 則為齒頂圓                if(i==imax):                    rfx=midx+xpt                    rfy=midy-ypt                last_x = midx+xpt                last_y = midy-ypt            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標            # 下列為齒頂圓上用來近似圓弧的直線            self.create_line(lfx,lfy,rfx,rfy,fill=color)canvas = doc['onegear']ctx = canvas.getContext("2d")x = (canvas.width)/2y = (canvas.height)/2r = 0.8*(canvas.height/2)# 齒數n = 53# 壓力角pa = 20Spur(ctx).Gear(x, y, r, n, pa, "blue")</script><!-- 以下處理 Cango Spur Gear --> <!-- Cango 程式庫 --><script type="text/javascript" src="/static/Cango-13v08-min.js"></script><script type="text/javascript" src="/static/CangoAxes-4v01-min.js"></script><script type="text/javascript" src="/static/gearUtils-05.js"></script><canvas id="cango_gear" width="800" height="750"></canvas><script type="text/python"># 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容from browser import document as doc# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換from browser import windowimport math# 主要用來取得畫布大小canvas = doc["cango_gear"]# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctxctx = canvas.getContext("2d")cango = window.Cango.new# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換shapedefs = window.shapeDefs# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形# in CangoAnimation.js#interpolate1 = window.interpolate# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件#cobj = window.Cobj.newshape = window.Shape.newpath = window.Path.newcreategeartooth = window.createGearTooth.newtweener = window.Tweener.new# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上cgo = cango("cango_gear")####################################### 畫正齒輪輪廓#####################################def cangoGear(n, m, pa):    # n 為齒數    #n = 17    # pa 為壓力角    #pa = 25    # m 為模數, 根據畫布的寬度, 計算適合的模數大小    # Module = mm of pitch diameter per tooth    #m = 0.8*canvas.width/n    # pr 為節圓半徑    pr = n*m/2 # gear Pitch radius    # generate gear    data = creategeartooth(m, n, pa)    # Brython 程式中的 print 會將資料印在 Browser 的 console 區    #print(data)    gearTooth = path(data, {      "fillColor":"#ddd0dd",      "border": True,      "strokeColor": "#606060" })    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中    gear = gearTooth.dup()    # gear 為單一齒的輪廓資料    #cgo.render(gearTooth)    # 利用單齒輪廓旋轉, 產生整個正齒輪外形    for i in range(1, n):        # 將 gearTooth 中的資料複製到 newTooth        newTooth = gearTooth.dup()        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear        newTooth.rotate(360*i/n)        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號        #gear.appendPath(newTooth, True) # trim move command = True old        gear.appendPath(newTooth)    # 建立軸孔    # add axle hole, hr 為 hole radius    hr = 0.6*pr # diameter of gear shaft    shaft = path(shapedefs.circle(hr))    #shaft.revWinding()    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path    # setup the animation    # backlash (mm)    bklsh = 0.04*m    # centre shift to make backlash    dC = bklsh/(2*math.tan(math.pi*pa/180))    # np 為小齒輪齒數    np = 13    # gear ratio    gr = n/np                  gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}    # gr*0.666 rpm    #pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}    # 0.666 rpm    # 目前並非以 tweener 執行動畫    #twnr = tweener(0, 90000, "loop")    return gear# 設定兩齒齒數n = 17n2 = 11n3 = 17reduced_ratio = 0.5# 使用 80% 的畫布寬度m = 0.8*canvas.width/((n+n2+n3)*reduced_ratio)# 設定共同的壓力角pa = 25# n 齒輪的節圓半徑pr = n*m/2# n2 齒輪的節圓半徑pr2 = n2*m/2pr3 = n3*m/2# 建立 geargear = cangoGear(n, m, pa)cx = canvas.width/2cy = canvas.height/2#gear.translate(cx, cy)# render 繪出靜態正齒輪輪廓#cgo.render(gear)# 利用 gear 資料複製一份, 命名為 gear1#gear1 = gear.dup()# 建立 gear1gear1 = cangoGear(n2, m, pa)gear2 = cangoGear(n3, m, pa)from time import timefrom browser.timer import request_animation_frame as raffrom browser.timer import set_intervaldeg = math.pi/180def draw():    cgo.clearCanvas()    rotate_speed = 6*deg    gear.rotate(rotate_speed)    # 在特定位置, 以特定 scale, 特定 degs 執行 render    # 設定囓合點在畫布正中央    # 囓合點往左偏 pr/2 即為 n 齒輪的圓心 x 座標    #cgo.render(gear, {'x':cx-pr*reduced_ratio, 'y':cy, 'scl':reduced_ratio, 'degs':0})    gear.transform.translate(cx-(pr+pr2)*reduced_ratio, cy)    gear.transform.scale(reduced_ratio)    gear.transform.rotate(0)    cgo.render(gear)    #cgo.render(gear, {'x':cx-(pr+pr2)*reduced_ratio, 'y':cy, 'scl':0.5, 'degs':0})    # 根據兩齒輪齒數比決定 n2 齒輪轉速        gear1.rotate(-rotate_speed*n/n2)    gear1.transform.translate(cx, cy)    gear1.transform.scale(reduced_ratio)    gear1.transform.rotate(180+(360/n2/2))    cgo.render(gear1)        gear2.rotate((rotate_speed*n/n2)*(n2/n3))    gear2.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)    gear2.transform.scale(reduced_ratio)    gear2.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)    cgo.render(gear2)        # 囓合點往右偏 pr2/2 即為 n2 齒輪的圓心 x 座標, 且 n2 齒轉 180 加一齒角度後囓合    #cgo.render(gear1, {'x':cx, 'y':cy, 'scl':reduced_ratio, 'degs':180+(360/n2/2)})    #cgo.render(gear2, {'x':cx+(pr2+pr3)*reduced_ratio, 'y':cy, 'scl':reduced_ratio, 'degs':180+(360/n3/2)+(180+(360/n2/2))*n2/n3})    set_interval(draw, 2)</script><script src="/static/Brython-3.5.1/brython.js"></script><script src="/static/Brython-3.5.1/brython_stdlib.js"></script></p><h1>數學方程式</h1>
<p>當 $a \ne 0$, 一元二次方程式 (ax^2 + bx + c = 0) 有兩組解, 可以寫成: $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p>
<p>上述原始碼為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">當 $a \ne 0$, 一元二次方程式 (ax^2 + bx + c = 0) 有兩組解, 可以寫成: $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</pre>
<p>希臘字母:&nbsp;<a href="https://en.wikipedia.org/wiki/Greek_alphabet">https://en.wikipedia.org/wiki/Greek_alphabet</a>&nbsp;</p>
<p>&nbsp;</p><h2>Matlab</h2>
<p>目前系上所取得的 Matlab 為 R2017a 版本, 可以安裝在 Windows, Linux 與 Mac 操作系統中.</p>
<p>Ubuntu 中安裝 Matlab 的流程:</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/X_PNVr01F8k" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>Windows 10 安裝 Matlab:</p>
<p>Matlab R2015a 之後的版本可以安裝在 Windows 10 操作系統, 且可以製作成可攜, 只要開啟時透過網路到認證主機取得授權即可.</p>
<p>需要安裝 MSVc++ 2005 redistributable 套件</p>
<h1>平面機構分析</h1>
<p>以四連桿及曲柄滑塊機構的位移、速度與加速度分析為例, 希望延伸到八連桿 <a href="https://en.wikipedia.org/wiki/Jansen%27s_linkage">Jansen's walking linkage</a></p>
<p>四連桿與曲柄滑塊:</p>
<p><a href="/download/?type=files&amp;filename=Analysis_of_Simple_Planar_Linkages.pdf">Analysis_of_Simple_Planar_Linkages.pdf</a></p>
<p>Jansen's 八連桿:</p>
<p><a href="/download/?type=files&amp;filename=Spee_Control_of_Jansen_Linkage_Mechanism_for_Exquisite_Tasks.pdf">Spee_Control_of_Jansen_Linkage_Mechanism_for_Exquisite_Tasks.pdf</a></p>
<p><a href="/download/?type=files&amp;filename=dynamic_Modeling_and_Nonlinear_Position_Control_of_Jansen_Linkage_Mechanisms.pdf">dynamic_Modeling_and_Nonlinear_Position_Control_of_Jansen_Linkage_Mechanisms.pdf</a></p>
<p>範例:</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/Q8gUvwM89A8" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p><a href="/download/?type=files&amp;filename=intro_dynamics.pdf">動力學簡介.pdf</a></p>
<h2>符號式推導</h2>
<p>使用 Python 的符號式推導前, 需要先安裝 <a href="https://github.com/sympy/sympy">sympy</a> 模組:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">python -m pip install sympy</pre>
<p>參考資料:&nbsp;<a href="https://github.com/mdecourse/2017springcd/tree/gh-pages/data">https://github.com/mdecourse/2017springcd/tree/gh-pages/data</a>&nbsp;</p>
<p>PLAP - 已知三角形 abc,&nbsp; <span style="background-color: #ffff00;">P</span>oint a 座標, <span style="background-color: #ffff00;">L</span>ength of a to C, and <span style="background-color: #ffff00;">A</span>ngle of ac link relative to ab, and <span style="background-color: #ffff00;">P</span>oint b 座標.</p>
<p>求 c 點座標, 表示為已知輸入變數的方程式.</p>
<p><img src="/download/?type=images&amp;filename=fourbar_plap_solvespace.png" alt="" width="800" height="486"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#PLAP
from sympy import symbols, sqrt, solve, cos, sin, Abs

# inputs
ax, ay, bx, by, bac, ac = symbols('ax ay bx by bac ac')
# intermediate variables
ab, dab = symbols('ab dab')
ad, bd = symbols('ad bd')
# outputs
cx, cy = symbols('cx cy')
# 從 a, b 點座標求 ab, ad 與 bd
ab = sqrt((ax-bx)**2+(ay-by)**2)
ad = Abs(bx-ax)
bd = Abs(by-ay)
data = solve(-bd**2+ad**2+ab**2-2*ad*ab*cos(dab), dab)
# 第1組解
dab = data[0]
cx = ax+ac*cos(dab+bac)
cy = ay+ac*sin(dab+bac)
print("cx=", cx, "cy=", cy)
# 第二組解
dab = data[1]
cx = ax+ac*cos(dab+bac)
cy = ay+ac*sin(dab+bac)
print("cx=", cx, "cy=", cy)</pre>
<p>PLLP - 已知三角形 abc,&nbsp; 順時鐘方向 Point a 座標,&nbsp; Length of ac 與 Length of cb, 以及 Point b 座標.</p>
<p>求 c 點座標, 表示為已知輸入變數的方程式.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#PLLP
from sympy import symbols, sqrt, solve, cos, sin, Abs

# inputs
ax, ay, bx, by, ac, cb = symbols('ax ay bx by ac cb')
# intermediate variables
ab, dab, bac, degree= symbols('ab dab bac degree')
ad, bd = symbols('ad bd')
# outputs
cx, cy = symbols('cx cy')
# 從 a, b 點座標求 ab, ad 與 bd

ab = sqrt((ax-bx)**2+(ay-by)**2)
'''
ac = sqrt((ax-cx)**2+(ay-cy)**2)
cb = sqrt((cx-bx)**2+(cy-by)**2)
#ac = sqrt((ax-cx)**2+(ay-cy)**2)
'''
# 從兩組解中擇一
data = solve([ac**2-((ax-cx)**2+(ay-cy)**2), cb**2-((cx-bx)**2+(cy-by)**2)], [cx, cy])
# 第1組解
print("cx = ", data[0][0])
print("cy = ", data[1][0])
# 第2組解
print("cx = ", data[0][1])
print("cy = ", data[1][1])
</pre>
<p>PLPP - 已知 Point b 座標, Length of be, Point c 座標與 Point d 座標.</p>
<p>求 e 點座標, 表示為已知輸入變數的方程式.</p>
<p><img src="/download/?type=images&amp;filename=plpp_crank_slider.png" alt="" width="800" height="446"></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#PLPP
from sympy import symbols, sqrt, solve

# inputs
bx, by, be, cx, cy, dx, dy = symbols('bx by be cx cy dx dy')
# intermediate variables
cd, m= symbols('cd m')
# outputs
ex, ey = symbols('ex ey')
# e on line cd
cd = sqrt((cx-dx)**2+(cy-dy)**2)
m = (dx-cx)/(dy-cy)
data = solve([be-sqrt((bx-ex)**2+(by-ey)**2), ex-cx-m*(ey-cy)] ,  [ex, ey])
print(data)
'''
[(((cx - dx)*(bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (-cy + dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2)) - (cx*dy - cy*dx)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2))/((cy - dy)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2)), (bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (-cy + dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2))/(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2)), (((cx - dx)*(bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (cy - dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2)) - (cx*dy - cy*dx)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2))/((cy - dy)*(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2)), (bx*cx*cy - bx*cx*dy - bx*cy*dx + bx*dx*dy + by*cy**2 - 2*by*cy*dy + by*dy**2 + cx**2*dy - cx*cy*dx - cx*dx*dy + cy*dx**2 + (cy - dy)*sqrt(be**2*cx**2 - 2*be**2*cx*dx + be**2*cy**2 - 2*be**2*cy*dy + be**2*dx**2 + be**2*dy**2 - bx**2*cy**2 + 2*bx**2*cy*dy - bx**2*dy**2 + 2*bx*by*cx*cy - 2*bx*by*cx*dy - 2*bx*by*cy*dx + 2*bx*by*dx*dy - 2*bx*cx*cy*dy + 2*bx*cx*dy**2 + 2*bx*cy**2*dx - 2*bx*cy*dx*dy - by**2*cx**2 + 2*by**2*cx*dx - by**2*dx**2 + 2*by*cx**2*dy - 2*by*cx*cy*dx - 2*by*cx*dx*dy + 2*by*cy*dx**2 - cx**2*dy**2 + 2*cx*cy*dx*dy - cy**2*dx**2))/(cx**2 - 2*cx*dx + cy**2 - 2*cy*dy + dx**2 + dy**2))]
'''


</pre>
<p>&nbsp;</p>
<h1>學習 V-rep</h1>
<p>Virtual robot experimentation platform 虛擬機器人實驗平台</p>
<p>The robot simulator V-REP, with integrated development environment, is based on a distributed control architecture: each object/model can be individually controlled via an embedded script, a plugin, a ROS or BlueZero node, a remote API client, or a custom solution. This makes V-REP very versatile and ideal for multi-robot applications. Controllers can be written in C/C++, Python, Java, Lua, Matlab or Octave.</p>
<p>V-REP is used for fast algorithm development, factory automation simulations, fast prototyping and verification, robotics related education, remote monitoring, safety double-checking, etc.</p>
<p>功能-&nbsp;<a href="http://www.coppeliarobotics.com/features.html">http://www.coppeliarobotics.com/features.html</a>&nbsp;</p>
<p>使用授權:&nbsp;<a href="http://www.coppeliarobotics.com/licensing.html">http://www.coppeliarobotics.com/licensing.html</a>&nbsp;<a href="http://www.coppeliarobotics.com/assets/v-replicensingoverview.pdf">使用授權說明</a></p>
<p>使用者手冊:&nbsp;<a href="http://www.coppeliarobotics.com/helpFiles/index.html">http://www.coppeliarobotics.com/helpFiles/index.html</a>&nbsp;<a href="http://www.coppeliarobotics.com/contributions.html">其他資料</a></p>
<p><a href="http://www.coppeliarobotics.com/otherscenes.html">額外範例場景</a></p>
<p>論壇:&nbsp;<a href="http://www.forum.coppeliarobotics.com/">http://www.forum.coppeliarobotics.com/</a>&nbsp;</p>
<p>概述:<a href="http://www.coppeliarobotics.com/assets/v-repoverviewpresentation.pdf">http://www.coppeliarobotics.com/assets/v-repoverviewpresentation.pdf</a>&nbsp;</p>
<h2>Dynamic Engines</h2>
<p><a href="http://bulletphysics.org">http://bulletphysics.org</a>&nbsp;, <a href="https://github.com/bulletphysics/bullet3">bullet3 on github</a></p>
<p><a href="http://www.ode.org/">http://www.ode.org/</a>&nbsp;</p>
<p><a href="http://blog.wolfire.com/2010/03/Comparing-ODE-and-Bullet">ode 與 bullet 比較</a></p>
<p>2015.10 已經被微軟併購的&nbsp;<a href="https://www.havok.com">https://www.havok.com</a>&nbsp;</p>
<p><a href="https://www.algoryx.se">https://www.algoryx.se</a>&nbsp;與&nbsp;<a href="http://www.algodoo.com">http://www.algodoo.com</a>&nbsp;(教育市場)</p>
<h2>客製化程式</h2>
<p>resizable floor custumization script:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function updateFloor()
    local c=readInfo()
    local sx=c['sizes'][1]/5
    local sy=c['sizes'][2]/5
    local sizeFact=simGetObjectSizeFactor(model)
    simSetObjectParent(e1,-1,true)
    local child=simGetObjectChild(model,0)
    while child~=-1 do
        simRemoveObject(child)
        child=simGetObjectChild(model,0)
    end
    local xPosInit=(sx-1)*-2.5*sizeFact
    local yPosInit=(sy-1)*-2.5*sizeFact
    local f1,f2
    for x=1,sx,1 do
        for y=1,sy,1 do
            if (x==1)and(y==1) then
                simSetObjectParent(e1,model,true)
                f1=e1
            else
                f1=simCopyPasteObjects({e1},0)[1]
                f2=simCopyPasteObjects({e2},0)[1]
                simSetObjectParent(f1,model,true)
                simSetObjectParent(f2,f1,true)
            end
            local p=simGetObjectPosition(f1,sim_handle_parent)
            p[1]=xPosInit+(x-1)*5*sizeFact
            p[2]=yPosInit+(y-1)*5*sizeFact
            simSetObjectPosition(f1,sim_handle_parent,p)
        end
    end
end

function getDefaultInfoForNonExistingFields(info)
    if not info['version'] then
        info['version']=0
    end
    if not info['sizes'] then
        info['sizes']={1,1}
    end
end

function readInfo()
    local data=simReadCustomDataBlock(model,'XYZ_FLOOR_INFO')
    if data then
        data=simUnpackTable(data)
    else
        data={}
    end
    getDefaultInfoForNonExistingFields(data)
    return data
end

function writeInfo(data)
    if data then
        simWriteCustomDataBlock(model,'XYZ_FLOOR_INFO',simPackTable(data))
    else
        simWriteCustomDataBlock(model,'XYZ_FLOOR_INFO','')
    end
end

function updateUi()
    local c=readInfo()
    local sizeFact=simGetObjectSizeFactor(model)
    simExtCustomUI_setLabelText(ui,1,'X-size (m): '..string.format("%.2f",c['sizes'][1]*sizeFact),true)
    simExtCustomUI_setSliderValue(ui,2,c['sizes'][1]/5,true)
    simExtCustomUI_setLabelText(ui,3,'Y-size (m): '..string.format("%.2f",c['sizes'][2]*sizeFact),true)
    simExtCustomUI_setSliderValue(ui,4,c['sizes'][2]/5,true)
end

function sliderXChange(ui,id,newVal)
    local c=readInfo()
    c['sizes'][1]=newVal*5
    writeInfo(c)
    updateUi()
    updateFloor()
end

function sliderYChange(ui,id,newVal)
    local c=readInfo()
    c['sizes'][2]=newVal*5
    writeInfo(c)
    updateUi()
    updateFloor()
end

function closeEventHandler(h)
    simRemoveScript(sim_handle_self)
end

function showDlg()
    if not ui then
    xml = [[
&lt;ui title="Floor Customizer" closeable="true" onclose="closeEventHandler" resizable="false" activate="false"&gt;
    &lt;group layout="form" flat="true"&gt;
        &lt;label text="X-size (m): 1" id="1"/&gt;
        &lt;hslider tick-position="above" tick-interval="1" minimum="1" maximum="5" onchange="sliderXChange" id="2"/&gt;
        &lt;label text="Y-size (m): 1" id="3"/&gt;
        &lt;hslider tick-position="above" tick-interval="1" minimum="1" maximum="5" onchange="sliderYChange" id="4"/&gt;
    &lt;/group&gt;
    &lt;label text="" style="* {margin-left: 400px;}"/&gt;
&lt;/ui&gt;
]]
        ui=simExtCustomUI_create(xml)
        if 2==simGetInt32Parameter(sim_intparam_platform) then
            -- To fix a Qt bug on Linux
            simAuxFunc('activateMainWindow')
        end
        updateUi()
    end
end

function hideDlg()
    if ui then
        simExtCustomUI_destroy(ui)
        ui=nil
    end
end

if (sim_call_type==sim_customizationscriptcall_initialization) then
    model=simGetObjectAssociatedWithScript(sim_handle_self)
    e1=simGetObjectHandle('ResizableFloor_5_25_element')
    e2=simGetObjectHandle('ResizableFloor_5_25_visibleElement')
	simSetScriptAttribute(sim_handle_self,sim_customizationscriptattribute_activeduringsimulation,false)
end

if (sim_call_type==sim_customizationscriptcall_nonsimulation) then
    local s=simGetObjectSelection()
    if s and #s&gt;=1 and s[1]==model then
        showDlg()
    else
        hideDlg()
    end
end

if (sim_call_type==sim_customizationscriptcall_lastbeforesimulation) then
    hideDlg()
end

if (sim_call_type==sim_customizationscriptcall_cleanup) then
    hideDlg()
end
</pre>
<p>&nbsp;</p>
<h1>Flask 使用手冊</h1>
<p><a href="http://flask.pocoo.org/docs/0.10/.latex/Flask.pdf">http://flask.pocoo.org/docs/0.10/.latex/Flask.pdf</a></p>
<p>local <a href="/download/?type=files&amp;filename=Flask.pdf">Flask.pdf</a>&nbsp;(表示 CMSimfly 的 downlosd 功能是正常的, 但是 downloads 則有問題!!</p>
<p>Micro 等級的 Python 網際程式框架指的是指保留核心基礎功能, 其他功能則以 plugin 附加</p>
<p>特性是模組化強, 功能較具彈性</p>
<p>Flask depends on two external libraries, Werkzeug and Jinja2.</p>
<p>Werkzeug is a toolkit for WSGI, the standard Python interface between web applications and a variety of servers for both development and deployment.</p>
<p>Jinja2 renders templates.</p>
<p>利用 pip 安裝 Flask</p>
<p>sudo pip install Flask</p>
<p>假如是在 Windows, 則要將 Python 安裝目錄下的 Scripts 設為指令搜尋路徑</p>
<p>最小執行程式設定</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
# 將檔案存成 simpleflask.py
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello World!'
if __name__ == '__main__':
    app.run()</pre>
<p>Flask 程式執行:</p>
<p>python simpleflask.py</p>
<p>然後以瀏覽器 <a>http://localhost:5000</a>&nbsp;擷取 Flask 程式回應內容</p>
<p>So what did that code do?</p>
<ol>
<li>First we imported the Flask class. An instance of this class will be our WSGI application.</li>
<li>&nbsp;Next we create an instance of this class. The first argument is the name of the application&rsquo;s module or package. If you are using a single module (as in this example), you should use __name__ because depending on if it&rsquo;s started as application or imported as module the name will be different ('__main__' versus the actual import name). This is needed so that Flask knows where to look for templates, static files, and so on.&nbsp;</li>
<li>We then use the route() decorator to tell Flask what URL should trigger our function.</li>
<li>The function is given a name which is also used to generate URLs for that particular function, and returns the message we want to display in the user&rsquo;s browser.</li>
<li>Finally we use the run() function to run the local server with our application. The if __name__ == '__main__': makes sure the server only runs if the script is executed directly from the Python interpreter and not used as an imported module.</li>
<li>To stop the server, hit control-C.</li>
</ol>